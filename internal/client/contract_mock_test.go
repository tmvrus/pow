// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./contract_mock_test.go -package=client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// Mocksolver is a mock of solver interface.
type Mocksolver struct {
	ctrl     *gomock.Controller
	recorder *MocksolverMockRecorder
}

// MocksolverMockRecorder is the mock recorder for Mocksolver.
type MocksolverMockRecorder struct {
	mock *Mocksolver
}

// NewMocksolver creates a new mock instance.
func NewMocksolver(ctrl *gomock.Controller) *Mocksolver {
	mock := &Mocksolver{ctrl: ctrl}
	mock.recorder = &MocksolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksolver) EXPECT() *MocksolverMockRecorder {
	return m.recorder
}

// Solve mocks base method.
func (m *Mocksolver) Solve(ctx context.Context, bits int32, hashAlg, resource string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve", ctx, bits, hashAlg, resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve.
func (mr *MocksolverMockRecorder) Solve(ctx, bits, hashAlg, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*Mocksolver)(nil).Solve), ctx, bits, hashAlg, resource)
}

// MockconnectionSocket is a mock of connectionSocket interface.
type MockconnectionSocket struct {
	ctrl     *gomock.Controller
	recorder *MockconnectionSocketMockRecorder
}

// MockconnectionSocketMockRecorder is the mock recorder for MockconnectionSocket.
type MockconnectionSocketMockRecorder struct {
	mock *MockconnectionSocket
}

// NewMockconnectionSocket creates a new mock instance.
func NewMockconnectionSocket(ctrl *gomock.Controller) *MockconnectionSocket {
	mock := &MockconnectionSocket{ctrl: ctrl}
	mock.recorder = &MockconnectionSocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconnectionSocket) EXPECT() *MockconnectionSocketMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockconnectionSocket) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockconnectionSocketMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockconnectionSocket)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockconnectionSocket) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockconnectionSocketMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockconnectionSocket)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockconnectionSocket) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockconnectionSocketMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockconnectionSocket)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockconnectionSocket) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockconnectionSocketMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockconnectionSocket)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockconnectionSocket) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockconnectionSocketMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockconnectionSocket)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockconnectionSocket) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockconnectionSocketMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockconnectionSocket)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockconnectionSocket) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockconnectionSocketMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockconnectionSocket)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockconnectionSocket) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockconnectionSocketMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockconnectionSocket)(nil).Write), b)
}
