// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./contract_mock_test.go -package=session
//

// Package session is a generated GoMock package.
package session

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockhashCashVerifier is a mock of hashCashVerifier interface.
type MockhashCashVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockhashCashVerifierMockRecorder
}

// MockhashCashVerifierMockRecorder is the mock recorder for MockhashCashVerifier.
type MockhashCashVerifierMockRecorder struct {
	mock *MockhashCashVerifier
}

// NewMockhashCashVerifier creates a new mock instance.
func NewMockhashCashVerifier(ctrl *gomock.Controller) *MockhashCashVerifier {
	mock := &MockhashCashVerifier{ctrl: ctrl}
	mock.recorder = &MockhashCashVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashCashVerifier) EXPECT() *MockhashCashVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockhashCashVerifier) Verify(ctx context.Context, zeros int, alg, secret, verifiable string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, zeros, alg, secret, verifiable)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockhashCashVerifierMockRecorder) Verify(ctx, zeros, alg, secret, verifiable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockhashCashVerifier)(nil).Verify), ctx, zeros, alg, secret, verifiable)
}

// MockwordProvider is a mock of wordProvider interface.
type MockwordProvider struct {
	ctrl     *gomock.Controller
	recorder *MockwordProviderMockRecorder
}

// MockwordProviderMockRecorder is the mock recorder for MockwordProvider.
type MockwordProviderMockRecorder struct {
	mock *MockwordProvider
}

// NewMockwordProvider creates a new mock instance.
func NewMockwordProvider(ctrl *gomock.Controller) *MockwordProvider {
	mock := &MockwordProvider{ctrl: ctrl}
	mock.recorder = &MockwordProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwordProvider) EXPECT() *MockwordProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockwordProvider) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockwordProviderMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockwordProvider)(nil).Get), ctx)
}
